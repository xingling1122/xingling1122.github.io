[{"title":"Android内存泄漏场景","date":"2017-07-13T15:24:33.782Z","path":"2017/07/13/android内存泄漏场景/","text":"在开发过程中，经常发生Android的内存泄漏，如以下几种： 一、匿名内部类持有外部类的引用，如常用的Thread、Handler和AsyncTask如下：123456789101112131415161718192021222324252627282930313233343536373839public class SyncTaskDemoActivity extends Activity &#123; private int today = 0; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // 异步执行任务 new AsyncTask&lt;Object, Void, Boolean&gt;() &#123; @Override protected void onPreExecute() &#123; super.onPreExecute(); &#125; @Override protected Boolean doInBackground(Object... params) &#123; // do something in backfround // 长时间的耗时 while (true) &#123; today++; if (today &gt; 100000) break; &#125; return true; &#125; @Override protected void onPostExecute(Boolean result) &#123; super.onPostExecute(result); if (result) &#123; // success do something &#125; else &#123; // error &#125; &#125; &#125;.execute(); &#125; &#125; 修改后：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class SyncTaskDemoActivity extends Activity &#123; private int today = 0; private AsyncTask mAsyncTask; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mAsyncTask = new AsyncTask&lt;Object, Void, Boolean&gt;() &#123; @Override protected void onPreExecute() &#123; super.onPreExecute(); &#125; @Override protected Boolean doInBackground(Object... params) &#123; // do something in backfround // 长时间的耗时 while (true) &#123; if (cancel(true)) break; today++; if (today &gt; 100000) break; &#125; return true; &#125; @Override protected void onPostExecute(Boolean result) &#123; super.onPostExecute(result); if (result) &#123; // success do something &#125; else &#123; // error &#125; &#125; @Override protected void onCancelled() &#123; super.onCancelled(); &#125; &#125;; // 异步执行任务 mAsyncTask.execute(); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); mAsyncTask.cancel(true); &#125; &#125; 解决办法：继承该类，并声明为静态私有，因为静态私有类不持有外部类的引用，对于AsyncTask可以执行cancle方法 二、静态变量持有该类的实例，销毁时，无法释放该实例以下代码均会导致内存泄漏123456789public class MainActivity extends Activity&#123; private static Context sContext;@Override protected void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); sContext = this; &#125;&#125; 或123456789public class MainActivity extends Activity&#123; private static View view;@Override protected void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); view = new View(this); &#125;&#125; 三、单例模式导致的内存泄漏12345678910111213141516171819202122232425262728public class TestManager&#123; private List&lt;OnDataArrivedListener&gt; listeners = new ArrayList&lt;&gt;(); private static class SingletonHolder&#123; public static final TestManager instance = new TestManager(); &#125; private TestManager()&#123; &#125; public static TestManager getInstance()&#123; return SingletonHolder.instance; &#125; public synchronized void registerListener(OnDataArrivedListener listener)&#123; if (!listeners.equals(listener)) listeners.add(listener); &#125; public synchronized void unregisterListener(OnDataArrivedListener listener)&#123; if (listeners.equals(listener)) listeners.remove(listener); &#125; public interface OnDataArrivedListener&#123; public void onDataArrived(Object data); &#125;&#125; 原因：由于疏忽，忘了写解绑，就会导致内存泄漏 四、属性动画属性动画持有该类的一个View,若该类销毁时，属性动画还在执行，将导致内存泄漏解决办法：调用属性动画的cancel","tags":[]},{"title":"建立SSH连接","date":"2017-07-12T19:18:58.757Z","path":"2017/07/13/建立SSH连接/","text":"为了方便与服务器的连接，避免每次都需输入密码，可采用SSH连接方式代替Http连接，这里简要介绍如何进行连接 1、登录到服务器（我这里用的是ubuntu)ssh -l root 123.207.244.252#root为用户名 2、在服务器产生公钥和秘钥（其它主机上产生也行，不过为了其它终端能方便的获取到秘钥，推荐在服务器上产生）ssh-keygen -t rsa 3、在.ssh文件夹内创建authorized_keys文件，同时将刚刚产生的公钥复制到里面，并且修改文件权限less id_rsa.pub &gt; authorized_keys chmod 777 authorized_keys 4、将秘钥从服务端下载下来保存到本地用户目录下的.ssh文件夹下scp -r root@123.207.244.252:~/.ssh/id_rsa ~/.ssh/id_rsa 5、之后访问服务器就不需要密码了","tags":[]},{"title":"Hello World","date":"2017-07-12T18:55:40.683Z","path":"2017/07/13/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]